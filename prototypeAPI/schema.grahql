# Mutation
type Mutation {
	createUser(user: UserCreate): User
	updateUser(user: UserUpdate): User
	deleteUser(id: String): User
	createWork(work: WorkCreate): Work
	updateWork(work: WorkUpdate): Work
	deleteWork(id: String!, userId: String): Work
}

# Query
type Query {
	getUser(id: String!): User
	listUsers(limit: Int, nextToken: String): UserConnection
	getWork(id: String!, userId: String!): Work
	listWorks(limit: Int, nextToken: String): WorkConnection
}

type User {
	id: String!
	email: String!
	name: String!
	career: String
	avatarUri: String
	message: String
	works(limit: Int, nextToken: String): WorkConnection
}

type UserConnection {
	items: [User]
	nextToken: String
}

input UserCreate {
	id: String
	name: String!
	email: String!
	career: String
	avatarUri: String!
	message: String
}

input UserUpdate {
	id: String!
	name: String
	email: String
	career: String
	message: String
	avatarUri: String
}

type Work {
	id: String!
	userId: String!
	tags: [String]
	createdAt: Int!
	title: String!
	imageUri: String!
	description: String!
}

type WorkConnection {
	items: [Work]
	nextToken: String
}

input WorkCreate {
	userId: String
	title: String!
	tags: [String]
	imageUri: String!
	description: String!
}

input WorkUpdate {
	id: String!
	userId: String!
	tags: [String]
	title: String!
	imageUri: String
	description: String
}

schema {
	query: Query
	mutation: Mutation
}
